# Generated by Django 4.2.17 on 2025-04-25 06:54

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='MenuModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('links', models.CharField(help_text="'/here/is/the/your/refer/' after the 3 before and equals 100 symbols", max_length=100, unique=True, validators=[django.core.validators.MaxLengthValidator(limit_value=100, message='Max length (of path) 100 symbols'), django.core.validators.MinLengthValidator(limit_value=3, message='Min length (of path) 3 symbols'), django.core.validators.RegexValidator(message='The path has the invalid format', regex='^(?!.*  )[a-z][\\w\\-_\\d]{1,98}\\/$[^\\S\\W \\/]?')], verbose_name='Reference')),
                ('text', models.CharField(help_text='The tiel (or name) of your reference', max_length=50, unique=True, validators=[django.core.validators.MaxLengthValidator(limit_value=50, message='Max length (of title) 50 symbols'), django.core.validators.MinLengthValidator(limit_value=3, message='Min length (of title) 3 symbols'), django.core.validators.RegexValidator(message='The title not have correct format.', regex='^(?!.*  )\\/*[a-zA-Zа-яА-ЯёЁ][\\w \\-_\\dа-яА-ЯёЁ]{1,48}\\\n[a-zA-Zа-яА-ЯёЁ]$[^\\S\\W \\\\]?')], verbose_name='Title')),
                ('level', models.CharField(choices=[('TOP', 'Верхний'), ('SIDE', 'Боковой'), ('BOTTOM', 'Нижний')], default='TOP', verbose_name='Level manu')),
            ],
            options={
                'verbose_name': 'Level of menu',
                'verbose_name_plural': 'Levels of menu',
            },
        ),
        migrations.CreateModel(
            name='PageModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('links', models.CharField(help_text="'/here/is/the/your/refer/' after the 3 before and equals 100 symbols", max_length=100, unique=True, validators=[django.core.validators.MaxLengthValidator(limit_value=100, message='Max length (of path) 100 symbols'), django.core.validators.MinLengthValidator(limit_value=3, message='Min length (of path) 3 symbols'), django.core.validators.RegexValidator(message='The path has the invalid format', regex='^(?!.*  )[a-z][\\w\\-_\\d]{1,98}\\/$[^\\S\\W \\/]?')], verbose_name='Reference')),
                ('text', models.CharField(help_text='The tiel (or name) of your reference', max_length=50, unique=True, validators=[django.core.validators.MaxLengthValidator(limit_value=50, message='Max length (of title) 50 symbols'), django.core.validators.MinLengthValidator(limit_value=3, message='Min length (of title) 3 symbols'), django.core.validators.RegexValidator(message='The title not have correct format.', regex='^(?!.*  )\\/*[a-zA-Zа-яА-ЯёЁ][\\w \\-_\\dа-яА-ЯёЁ]{1,48}\\\n[a-zA-Zа-яА-ЯёЁ]$[^\\S\\W \\\\]?')], verbose_name='Title')),
                ('active', models.BooleanField(default=False, help_text='Default is False (not activated), if you want the public page it means that True', verbose_name='Activate')),
                ('template', models.CharField(choices=[('index.html', 'Главная'), ('about/index.html', 'О нас'), ('contacts/index.html', 'Контакты'), ('404/index.html', '404')], default='404/index.html', verbose_name="Choose the page's template")),
                ('menu_list', models.ManyToManyField(help_text='The Menu that you wont to add to your page', related_name='pages_menu', to='menu_app.menumodel', verbose_name='Choose Menu')),
            ],
            options={
                'verbose_name': 'Page',
                'verbose_name_plural': 'Pages',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='%(class)s_groups', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='%(class)s_user_permissions', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
